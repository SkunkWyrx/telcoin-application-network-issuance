export default [
  { inputs: [], name: "AccessControlBadConfirmation", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "neededRole", type: "bytes32" },
    ],
    name: "AccessControlUnauthorizedAccount",
    type: "error",
  },
  { inputs: [], name: "EnforcedPause", type: "error" },
  { inputs: [], name: "ExpectedPause", type: "error" },
  { inputs: [], name: "InvalidInitialization", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "InvalidMintBurnBoundry",
    type: "error",
  },
  { inputs: [], name: "NotInitializing", type: "error" },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [{ internalType: "string", name: "value", type: "string" }],
    name: "ZeroValueInput",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "bytes32", name: "role", type: "bytes32" },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32",
      },
    ],
    name: "RoleAdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "bytes32", name: "role", type: "bytes32" },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RoleGranted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "bytes32", name: "role", type: "bytes32" },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RoleRevoked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      { indexed: false, internalType: "bool", name: "validity", type: "bool" },
      { indexed: false, internalType: "uint256", name: "max", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "min", type: "uint256" },
    ],
    name: "XYZUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAINTAINER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POL",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SUPPORT_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SWAPPER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TELCOIN",
    outputs: [{ internalType: "contract ERC20", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "bool", name: "validity", type: "bool" },
      { internalType: "uint256", name: "maxLimit", type: "uint256" },
      { internalType: "uint256", name: "minLimit", type: "uint256" },
    ],
    name: "UpdateXYZ",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "__StablecoinHandler_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "__StablecoinHandler_init_unchained",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "wallet", type: "address" },
      {
        components: [
          { internalType: "address", name: "defiSafe", type: "address" },
          { internalType: "address", name: "aggregator", type: "address" },
          {
            internalType: "contract ISimplePlugin",
            name: "plugin",
            type: "address",
          },
          { internalType: "contract ERC20", name: "feeToken", type: "address" },
          { internalType: "address", name: "referrer", type: "address" },
          { internalType: "uint256", name: "referralFee", type: "uint256" },
          { internalType: "bytes", name: "walletData", type: "bytes" },
          { internalType: "bytes", name: "swapData", type: "bytes" },
        ],
        internalType: "struct AmirX.DefiSwap",
        name: "defi",
        type: "tuple",
      },
    ],
    name: "defiSwap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "wallet", type: "address" },
      {
        components: [
          { internalType: "address", name: "liquiditySafe", type: "address" },
          { internalType: "address", name: "destination", type: "address" },
          { internalType: "address", name: "origin", type: "address" },
          { internalType: "uint256", name: "oAmount", type: "uint256" },
          { internalType: "address", name: "target", type: "address" },
          { internalType: "uint256", name: "tAmount", type: "uint256" },
          {
            internalType: "address",
            name: "stablecoinFeeCurrency",
            type: "address",
          },
          {
            internalType: "address",
            name: "stablecoinFeeSafe",
            type: "address",
          },
          { internalType: "uint256", name: "feeAmount", type: "uint256" },
        ],
        internalType: "struct StablecoinHandler.StablecoinSwap",
        name: "ss",
        type: "tuple",
      },
      {
        components: [
          { internalType: "address", name: "defiSafe", type: "address" },
          { internalType: "address", name: "aggregator", type: "address" },
          {
            internalType: "contract ISimplePlugin",
            name: "plugin",
            type: "address",
          },
          { internalType: "contract ERC20", name: "feeToken", type: "address" },
          { internalType: "address", name: "referrer", type: "address" },
          { internalType: "uint256", name: "referralFee", type: "uint256" },
          { internalType: "bytes", name: "walletData", type: "bytes" },
          { internalType: "bytes", name: "swapData", type: "bytes" },
        ],
        internalType: "struct AmirX.DefiSwap",
        name: "defi",
        type: "tuple",
      },
    ],
    name: "defiToStablecoinSwap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "getMaxLimit",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "getMinLimit",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "isXYZ",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "callerConfirmation", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "contract ERC20", name: "token", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "rescueCrypto",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "wallet", type: "address" },
      {
        components: [
          { internalType: "address", name: "liquiditySafe", type: "address" },
          { internalType: "address", name: "destination", type: "address" },
          { internalType: "address", name: "origin", type: "address" },
          { internalType: "uint256", name: "oAmount", type: "uint256" },
          { internalType: "address", name: "target", type: "address" },
          { internalType: "uint256", name: "tAmount", type: "uint256" },
          {
            internalType: "address",
            name: "stablecoinFeeCurrency",
            type: "address",
          },
          {
            internalType: "address",
            name: "stablecoinFeeSafe",
            type: "address",
          },
          { internalType: "uint256", name: "feeAmount", type: "uint256" },
        ],
        internalType: "struct StablecoinHandler.StablecoinSwap",
        name: "ss",
        type: "tuple",
      },
    ],
    name: "stablecoinSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "wallet", type: "address" },
      {
        components: [
          { internalType: "address", name: "liquiditySafe", type: "address" },
          { internalType: "address", name: "destination", type: "address" },
          { internalType: "address", name: "origin", type: "address" },
          { internalType: "uint256", name: "oAmount", type: "uint256" },
          { internalType: "address", name: "target", type: "address" },
          { internalType: "uint256", name: "tAmount", type: "uint256" },
          {
            internalType: "address",
            name: "stablecoinFeeCurrency",
            type: "address",
          },
          {
            internalType: "address",
            name: "stablecoinFeeSafe",
            type: "address",
          },
          { internalType: "uint256", name: "feeAmount", type: "uint256" },
        ],
        internalType: "struct StablecoinHandler.StablecoinSwap",
        name: "ss",
        type: "tuple",
      },
      {
        components: [
          { internalType: "address", name: "defiSafe", type: "address" },
          { internalType: "address", name: "aggregator", type: "address" },
          {
            internalType: "contract ISimplePlugin",
            name: "plugin",
            type: "address",
          },
          { internalType: "contract ERC20", name: "feeToken", type: "address" },
          { internalType: "address", name: "referrer", type: "address" },
          { internalType: "uint256", name: "referralFee", type: "uint256" },
          { internalType: "bytes", name: "walletData", type: "bytes" },
          { internalType: "bytes", name: "swapData", type: "bytes" },
        ],
        internalType: "struct AmirX.DefiSwap",
        name: "defi",
        type: "tuple",
      },
    ],
    name: "stablecoinToDefiSwap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "wallet", type: "address" },
      { internalType: "bool", name: "directional", type: "bool" },
      {
        components: [
          { internalType: "address", name: "liquiditySafe", type: "address" },
          { internalType: "address", name: "destination", type: "address" },
          { internalType: "address", name: "origin", type: "address" },
          { internalType: "uint256", name: "oAmount", type: "uint256" },
          { internalType: "address", name: "target", type: "address" },
          { internalType: "uint256", name: "tAmount", type: "uint256" },
          {
            internalType: "address",
            name: "stablecoinFeeCurrency",
            type: "address",
          },
          {
            internalType: "address",
            name: "stablecoinFeeSafe",
            type: "address",
          },
          { internalType: "uint256", name: "feeAmount", type: "uint256" },
        ],
        internalType: "struct StablecoinHandler.StablecoinSwap",
        name: "ss",
        type: "tuple",
      },
      {
        components: [
          { internalType: "address", name: "defiSafe", type: "address" },
          { internalType: "address", name: "aggregator", type: "address" },
          {
            internalType: "contract ISimplePlugin",
            name: "plugin",
            type: "address",
          },
          { internalType: "contract ERC20", name: "feeToken", type: "address" },
          { internalType: "address", name: "referrer", type: "address" },
          { internalType: "uint256", name: "referralFee", type: "uint256" },
          { internalType: "bytes", name: "walletData", type: "bytes" },
          { internalType: "bytes", name: "swapData", type: "bytes" },
        ],
        internalType: "struct AmirX.DefiSwap",
        name: "defi",
        type: "tuple",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  { stateMutability: "payable", type: "receive" },
] as const;
